package sudoku

import (
	"testing"
)

func TestDisplay(t *testing.T) {
	var board Board = [9][9]int{
		{0, 1, 0, 2, 0, 0, 3, 4, 0},
		{4, 0, 5, 0, 0, 0, 6, 0, 0},
		{3, 0, 0, 7, 0, 5, 0, 0, 8},
		{6, 7, 0, 0, 0, 4, 0, 0, 0},
		{9, 8, 0, 0, 0, 0, 0, 1, 6},
		{0, 0, 0, 3, 0, 0, 0, 9, 2},
		{2, 0, 0, 8, 0, 1, 0, 0, 4},
		{0, 0, 6, 0, 0, 0, 5, 0, 7},
		{0, 5, 4, 0, 0, 9, 0, 3, 0},
	}
	wanted := "\n" +
		"0 1 0 2 0 0 3 4 0\n" +
		"4 0 5 0 0 0 6 0 0\n" +
		"3 0 0 7 0 5 0 0 8\n" +
		"6 7 0 0 0 4 0 0 0\n" +
		"9 8 0 0 0 0 0 1 6\n" +
		"0 0 0 3 0 0 0 9 2\n" +
		"2 0 0 8 0 1 0 0 4\n" +
		"0 0 6 0 0 0 5 0 7\n" +
		"0 5 4 0 0 9 0 3 0"
	got := display(&board)
	if got != wanted {
		t.Errorf("wanted: '%v'\ngot '%v'", wanted, got)
	}
}

func TestSolve(t *testing.T) {
	t.Parallel()
	testData := []struct {
		name   string
		board  Board
		wanted string
	}{
		{
			name: "Easy Sudoku",
			board: [9][9]int{
				{0, 1, 0, 2, 0, 0, 3, 4, 0},
				{4, 0, 5, 0, 0, 0, 6, 0, 0},
				{3, 0, 0, 7, 0, 5, 0, 0, 8},
				{6, 7, 0, 0, 0, 4, 0, 0, 0},
				{9, 8, 0, 0, 0, 0, 0, 1, 6},
				{0, 0, 0, 3, 0, 0, 0, 9, 2},
				{2, 0, 0, 8, 0, 1, 0, 0, 4},
				{0, 0, 6, 0, 0, 0, 5, 0, 7},
				{0, 5, 4, 0, 0, 9, 0, 3, 0},
			},
			wanted: "\n" +
				"7 1 8 2 9 6 3 4 5\n" +
				"4 2 5 1 8 3 6 7 9\n" +
				"3 6 9 7 4 5 1 2 8\n" +
				"6 7 2 9 1 4 8 5 3\n" +
				"9 8 3 5 2 7 4 1 6\n" +
				"5 4 1 3 6 8 7 9 2\n" +
				"2 3 7 8 5 1 9 6 4\n" +
				"1 9 6 4 3 2 5 8 7\n" +
				"8 5 4 6 7 9 2 3 1",
		},
		{
			name: "Difficult Sudoku",
			board: [9][9]int{
				{3, 0, 0, 7, 0, 9, 0, 0, 1},
				{1, 2, 0, 0, 0, 0, 0, 8, 0},
				{0, 0, 0, 1, 0, 5, 0, 0, 0},
				{7, 9, 8, 0, 3, 0, 1, 6, 0},
				{5, 0, 2, 0, 0, 0, 0, 0, 0},
				{0, 3, 1, 0, 5, 0, 7, 9, 0},
				{0, 0, 0, 5, 0, 7, 0, 0, 0},
				{0, 5, 0, 0, 0, 0, 0, 1, 0},
				{2, 0, 0, 4, 0, 3, 0, 0, 6},
			},
			wanted: "\n" +
				"3 8 5 7 2 9 6 4 1\n" +
				"1 2 7 3 4 6 5 8 9\n" +
				"9 4 6 1 8 5 2 7 3\n" +
				"7 9 8 2 3 4 1 6 5\n" +
				"5 6 2 9 7 1 4 3 8\n" +
				"4 3 1 6 5 8 7 9 2\n" +
				"8 1 3 5 6 7 9 2 4\n" +
				"6 5 4 8 9 2 3 1 7\n" +
				"2 7 9 4 1 3 8 5 6",
		},
	}
	for _, tt := range testData {
		name := tt.name
		board := tt.board
		wanted := tt.wanted
		t.Run(name, func(t *testing.T) {
			t.Parallel()
			Solve(&board)
			got := display(&board)
			if got != wanted {
				t.Errorf("wanted: '%v'\ngot '%v'", wanted, got)
			}
		})
	}
}
